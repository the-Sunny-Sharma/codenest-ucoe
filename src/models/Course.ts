import mongoose, { type Model, Schema, type Document } from "mongoose";

/** Resource Schema */
export interface IResource extends Document {
  type: "pdf" | "text" | "link" | "code";
  content: string;
  title: string;
}

const ResourceSchema: Schema = new Schema({
  type: { type: String, enum: ["pdf", "text", "link", "code"], required: true },
  content: { type: String, required: true },
  title: { type: String, required: true },
});

/** Chapter Schema (Lecture) */
export interface IChapter extends Document {
  title: string;
  description: string;
  resources: IResource[];
  isLive: boolean;
  liveSessionDate?: Date;
  scheduledTime?: Date;
  videoUrl?: string;
  duration: number;
  order: number;
  muxPlaybackId?: string;
  muxAssetId?: string;
}

const ChapterSchema: Schema = new Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  resources: [ResourceSchema],
  isLive: { type: Boolean, required: true },
  liveSessionDate: { type: Date },
  scheduledTime: { type: Date },
  videoUrl: { type: String },
  duration: { type: Number, required: true },
  order: { type: Number, required: true },
  muxPlaybackId: { type: String },
  muxAssetId: { type: String },
});

/** Section Schema */
export interface ISection extends Document {
  title: string;
  description: string;
  order: number;
  whatYoullLearn: string[];
  prerequisites: string[];
  totalChapters: number;
  totalDuration: number;
  coverPhoto: string;
  chapters: IChapter[];
}

const SectionSchema: Schema = new Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  order: { type: Number, required: true },
  whatYoullLearn: [{ type: String }],
  prerequisites: [{ type: String }],
  totalChapters: { type: Number, default: 0 },
  totalDuration: { type: Number, default: 0 },
  coverPhoto: { type: String, required: true },
  chapters: [ChapterSchema],
});

/** Course Schema */
export interface ICourse extends Document {
  name: string; //Manual input
  slug: string; //Auto-generated by API endpoint /api/create-new
  description: string; //Manual input
  thumbnail: string; //Manual file upload
  promoVideo: string; //Manual file upload
  instructor: mongoose.Types.ObjectId; //Pointer to Teacher Object
  price: number; //Manual input
  enrolledStudents: mongoose.Types.ObjectId[]; //Array of student objects enrolled
  classCode: string; //Auto-generated by API endpoint /api/create-new
  totalHours: number; // -------Auto-calculated while uploading chapter video/live stream
  level: "Beginner" | "Intermediate" | "Advanced"; //Manual selection
  tags: string[]; //Manual Input
  prerequisites: string[]; //Manual Input
  sections: ISection[]; // ==Array of Sections
  createdAt: Date; //
  updatedAt: Date; //
  publishedAt?: Date; //
  rating: number; //
  numberOfReviews: number; //
  language: string; //Manual Entry
  certificate: boolean; //Manual Toggle
  status: "draft" | "published" | "archived"; //Defaulted to Draft //
  category: string; //
  liveStream?: {
    //
    streamKey: string;
    playbackId: string;
  };
}

const CourseSchema: Schema = new Schema({
  name: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  description: { type: String, required: true },
  thumbnail: { type: String, required: true },
  promoVideo: { type: String, required: true },
  instructor: { type: Schema.Types.ObjectId, ref: "Teacher", required: true },
  price: { type: Number, required: true },
  enrolledStudents: [{ type: Schema.Types.ObjectId, ref: "User" }],
  classCode: { type: String, required: true, unique: true },
  totalHours: { type: Number, required: true },
  level: {
    type: String,
    enum: ["Beginner", "Intermediate", "Advanced"],
    required: true,
  },
  tags: [{ type: String }],
  prerequisites: [{ type: String }],
  sections: [SectionSchema],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  publishedAt: { type: Date },
  rating: { type: Number, default: 0 },
  numberOfReviews: { type: Number, default: 0 },
  language: { type: String, required: true },
  certificate: { type: Boolean, default: false },
  status: {
    type: String,
    enum: ["draft", "published", "archived"],
    default: "draft",
  },
  category: { type: String, required: true },
  liveStream: {
    streamKey: String,
    playbackId: String,
  },
});

// Ensure the model is only created once to avoid OverwriteModelError
const Course: Model<ICourse> =
  mongoose.models.Course || mongoose.model<ICourse>("Course", CourseSchema);

export default Course;

// import mongoose, { Model, Schema, type Document } from "mongoose";

// export interface IChapter extends Document {
//   title: string;
//   description: string;
//   thumbnail: string;
//   videoUrls: string[];
//   liveSessionDate?: Date;
//   duration: number;
//   order: number;
// }

// export interface ICourse extends Document {
//   name: string;
//   slug: string;
//   description: string;
//   thumbnail: string;
//   promoVideo: string;
//   instructor: mongoose.Types.ObjectId;
//   price: number;
//   enrolledStudents: mongoose.Types.ObjectId[];
//   classCode: string;
//   totalHours: number;
//   level: "Beginner" | "Intermediate" | "Advanced";
//   tags: string[];
//   prerequisites: string[];
//   chapters: IChapter[];
//   createdAt: Date;
//   updatedAt: Date;
//   publishedAt?: Date;
//   rating: number;
//   numberOfReviews: number;
//   language: string;
//   certificate: boolean;
//   status: "draft" | "published" | "archived";
//   category: string;
//   streamUrl?: string;
// }

// const ChapterSchema: Schema = new Schema({
//   title: { type: String, required: true },
//   description: { type: String },
//   thumbnail: { type: String },
//   videoUrls: [{ type: String }],
//   liveSessionDate: { type: Date },
//   duration: { type: Number },
//   order: { type: Number },
// });

// const CourseSchema: Schema = new Schema({
//   name: { type: String, required: true },
//   slug: { type: String, required: true, unique: true },
//   description: { type: String, required: true },
//   thumbnail: { type: String, required: true },
//   promoVideo: { type: String, required: true },
//   instructor: { type: Schema.Types.ObjectId, ref: "Teacher", required: true },
//   price: { type: Number, required: true },
//   enrolledStudents: [{ type: Schema.Types.ObjectId, ref: "User" }],
//   classCode: { type: String, required: true, unique: true },
//   totalHours: { type: Number, required: true },
//   level: {
//     type: String,
//     enum: ["Beginner", "Intermediate", "Advanced"],
//     required: true,
//   },
//   tags: [{ type: String }],
//   prerequisites: [{ type: String }],
//   chapters: [ChapterSchema],
//   createdAt: { type: Date, default: Date.now },
//   updatedAt: { type: Date, default: Date.now },
//   publishedAt: { type: Date },
//   rating: { type: Number, default: 0 },
//   numberOfReviews: { type: Number, default: 0 },
//   language: { type: String, required: true },
//   certificate: { type: Boolean, default: false },
//   status: {
//     type: String,
//     enum: ["draft", "published", "archived"],
//     default: "draft",
//   },
//   category: { type: String, required: true },
//   streamUrl: { type: String },
// });

// // Ensure the model is only created once to avoid OverwriteModelError
// const Course: Model<ICourse> =
//   mongoose.models.Course || mongoose.model<ICourse>("Course", CourseSchema);

// export default Course;
