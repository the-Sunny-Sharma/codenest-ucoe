import mongoose, { type Model, Schema, type Document } from "mongoose";
import "@/models/Teacher";

/** Resource Schema */
export interface IResource extends Document {
  type: "pdf" | "text" | "link" | "code";
  content: string;
  title: string;
}

const ResourceSchema: Schema = new Schema({
  type: { type: String, enum: ["pdf", "text", "link", "code"], required: true },
  content: { type: String, required: true },
  title: { type: String, required: true },
});

/** Chapter Schema (Lecture) */
export interface IChapter extends Document {
  title: string;
  description: string;
  resources: IResource[];
  lectureType: "liveLecture" | "prerecordedVideo"; // NEW FIELD
  isLive?: boolean; // Only applicable when lectureType is liveLecture
  scheduledTime?: Date; // Determines when the lecture becomes available
  videoUrl?: string;
  duration: number;
  order: number;
  streamKey?: string;
  playbackId?: string;
  muxPlaybackId?: string;
  muxAssetId?: string;
  muxStreamId?: string;
}

const ChapterSchema: Schema = new Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  resources: [ResourceSchema],

  lectureType: {
    type: String,
    enum: ["liveLecture", "prerecordedVideo"],
    required: true,
  }, // NEW FIELD

  isLive: {
    type: Boolean,
    required: function (this: IChapter) {
      return this.lectureType === "liveLecture";
    }, // Required if liveLecture
  },

  scheduledTime: { type: Date }, // Live: When it starts | Video: When it's available

  videoUrl: { type: String },

  duration: { type: Number, default: 0 }, // Default set to 0

  order: { type: Number, required: true },
  streamKey: { type: String },
  playbackId: { type: String },
  muxPlaybackId: { type: String },
  muxAssetId: { type: String },
  muxStreamId: { type: String },
});

/** Section Schema */
export interface ISection extends Document {
  title: string;
  description: string;
  order: number;
  whatYoullLearn: string[];
  prerequisites: string[];
  totalChapters: number;
  totalDuration: number;
  coverPhoto: string;
  chapters: IChapter[];
}

const SectionSchema: Schema = new Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  order: { type: Number, required: true },
  whatYoullLearn: [{ type: String }],
  prerequisites: [{ type: String }],
  totalChapters: { type: Number, default: 0 },
  totalDuration: { type: Number, default: 0 },
  coverPhoto: { type: String, required: true },
  chapters: [ChapterSchema],
});

/** Course Schema */
export interface ICourse extends Document {
  name: string; //Manual input
  slug: string; //Auto-generated by API endpoint /api/create-new
  description: string; //Manual input
  thumbnail: string; //Manual file upload
  promoVideo: string; //Manual file upload
  instructor: mongoose.Types.ObjectId | string; //Pointer to Teacher Object
  price: number; //Manual input
  enrolledStudents: (mongoose.Types.ObjectId | string)[]; //Array of student objects enrolled
  classCode: string; //Auto-generated by API endpoint /api/create-new
  totalHours: number; // -------Auto-calculated while uploading chapter video/live stream
  level: "Beginner" | "Intermediate" | "Advanced"; //Manual selection
  tags: string[]; //Manual Input
  prerequisites: string[]; //Manual Input
  sections: ISection[]; // ==Array of Sections
  createdAt: Date; //
  updatedAt: Date; //
  publishedAt?: Date; //
  rating: number; //
  numberOfReviews: number; //
  language: string; //Manual Entry
  certificate: boolean; //Manual Toggle
  status: "draft" | "published" | "archived"; //Defaulted to Draft //
  category: string; //
  liveStream?: {
    streamKey: string;
    playbackId: string;
  };
}

const CourseSchema: Schema = new Schema({
  name: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  description: { type: String, required: true },
  thumbnail: { type: String, required: true },
  promoVideo: { type: String, required: true },
  instructor: { type: Schema.Types.ObjectId, ref: "Teacher", required: true },
  price: { type: Number, required: true },
  enrolledStudents: [{ type: Schema.Types.ObjectId, ref: "User" }],
  classCode: { type: String, required: true, unique: true },
  totalHours: { type: Number, required: true },
  level: {
    type: String,
    enum: ["Beginner", "Intermediate", "Advanced"],
    required: true,
  },
  tags: [{ type: String }],
  prerequisites: [{ type: String }],
  sections: [SectionSchema],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  publishedAt: { type: Date },
  rating: { type: Number, default: 0 },
  numberOfReviews: { type: Number, default: 0 },
  language: { type: String, required: true },
  certificate: { type: Boolean, default: false },
  status: {
    type: String,
    enum: ["draft", "published", "archived"],
    default: "draft",
  },
  category: { type: String, required: true },
  liveStream: {
    streamKey: String,
    playbackId: String,
  },
});

// Ensure the model is only created once to avoid OverwriteModelError
const Course: Model<ICourse> =
  mongoose.models.Course || mongoose.model<ICourse>("Course", CourseSchema);

export default Course;
